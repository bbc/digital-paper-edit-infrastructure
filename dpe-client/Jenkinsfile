#!/usr/bin/env groovy

pipeline {
    agent any
    environment {
        COSMOS_CERT = '/etc/pki/tls/private/client_crt_chain_key.pem'
        COMPONENT = 'digital-paper-edit'
        COSMOS_COMPONENT = 'digital-paper-edit'
        TARGET_BRANCH = 'main'
        PACKAGE_RELEASE_VERSION = ''
        HOME="/var/lib/jenkins/workspace/${env.JOB_BASE_NAME}"
    }

    parameters {
        booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Deploy to Test')
        string(name: 'SLACK_CHANNEL', defaultValue: '#jenkins', description: 'Slack Notifications Channel')
    }
    stages {
        stage("Retrieve environment variables") {
            steps {
                script {
                    sh 'aws ssm get-parameters --names "'
                }
            }
        }
        stage('Build RPM') {
            steps {
                script {
                    sh "echo Building for RPM release to Cosmos"
                    sh 'make release'
                }
            }
        }
        stage('Prepare Deployment Infrastructure') {
            steps {
                script {
                    sh "echo Preparing Deployment"
                    cosmosDeploy = 'npx bbc/cosmos-deploy#v3'
                    sh "${cosmosDeploy} update-repositories ${env.COSMOS_COMPONENT} test 1.0.0"
                    sh "${cosmosDeploy} update-config ${env.COSMOS_COMPONENT} test 1.0.0"
                    sh "${cosmosDeploy} update-repositories ${env.COSMOS_COMPONENT} live 1.0.0"
                    sh "${cosmosDeploy} update-config ${env.COSMOS_COMPONENT} live 1.0.0"
                    // sh "${cosmosDeploy} provision-all-stacks ${env.COSMOS_COMPONENT} test 1.0.0"
                }
            }
        }
        stage('Deploy to Cosmos') {
            steps {
                script {
                    if (params.DEPLOY) {
                        sh "echo Deploying to Cosmos on test environment"
                        // Deploy the release, and return the deployment ID as stdout
                        deployment = sh(
                        script: "cosmos deploy -f ${env.COSMOS_COMPONENT} test | grep 'Deployment created' | cut -f6 -d '/'",
                        returnStdout: true
                        ).trim()
                        echo "Deployment ID: ${deployment}"
                        sh "cosmos deploy-progress ${env.COSMOS_COMPONENT} test"
                        PACKAGE_RELEASE_VERSION = sh(returnStdout: true, script: 'ls ./RPMS | grep rpm').trim()
                    }
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    sh 'rm -rf SRPMS RPM'
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
        success {
            slackSend (channel: params.SLACK_CHANNEL, color: '#00FF00',
                message: ":party-jenkins: digital-paper-edit build #${env.BUILD_NUMBER} built successfully after ${currentBuild.durationString}, deploying release: ${params.DEPLOY}.")
        }
        fixed {
            slackSend (channel: params.SLACK_CHANNEL, color: '#00FF00',
                message: ":jenkins-mock: ${env.JOB_NAME} build #${env.BUILD_NUMBER} fixed! Job took ${currentBuild.durationString}")
        }
        failure {
            slackSend (channel: params.SLACK_CHANNEL, color: '#FF0000',
                message: ":eviljenkins: ${env.JOB_NAME} build #${env.BUILD_NUMBER} failed")
        }
    }
}